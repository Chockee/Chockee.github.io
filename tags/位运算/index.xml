<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>位运算 on Keep Hungry Keep Study</title>
    <link>https://chockee.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
    <description>Recent content in 位运算 on Keep Hungry Keep Study</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chockee.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>算法技巧：消去最后一位1</title>
      <link>https://chockee.github.io/post/%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7%E6%B6%88%E5%8E%BB%E6%9C%80%E5%90%8E%E4%B8%80%E4%BD%8D1/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chockee.github.io/post/%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7%E6%B6%88%E5%8E%BB%E6%9C%80%E5%90%8E%E4%B8%80%E4%BD%8D1/</guid>
      <description>算法原理  利用n&amp;amp;(n-1)可以消去二进制数中的最后一位1，比如：
 n = 10010, n-1 = 10001; n &amp;amp; (n-1) = 10010 &amp;amp; 10001 = 10000; 利用这个技巧，我们可以解决很多位运算相关的问题
举个例子 [1] 判断一个正整数 n 是否为 2 的幂次方
 如果一个数是 2 的幂次方，意味着 n 的二进制表示中，只有一个位 是1，其他都是0。
 所以呢，我们只需要判断N中的二进制表示法中是否只存在一个 1 就可以了。实现代码如下:
boolean judege(int n){ return n &amp;amp; (n - 1) == 0; }  [2] 将整数 n 转换为 m,需要改变多少二进制位？
 我们只需要计算 n 和 m 这两个数有多少个二进制位不一样就可以了，那么我们可以先让 n 和 m 进行异或，然后在计算异或得到的结果有多少个 1 就可以了。 ```java public int numsOfChange(int n, int m){ int t = n^m; int numOf1; while(t !</description>
    </item>
    
  </channel>
</rss>