<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Keep Hungry Keep Study</title>
    <link>https://chockee.github.io/post/</link>
    <description>Recent content in Posts on Keep Hungry Keep Study</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chockee.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>判断栈的压入与弹出序列是否相等</title>
      <link>https://chockee.github.io/post/%E5%88%A4%E6%96%AD%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E4%B8%8E%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chockee.github.io/post/%E5%88%A4%E6%96%AD%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E4%B8%8E%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89/</guid>
      <description> 题目描述 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等）
解题思路 最开始想的是数学的方法，如果弹出序列出现一个数字，那么这个数字后面比它小的数字应该是按照这几个数字在压入序列中的逆序弹出的。
后面发现不用那么麻烦，只要new一个栈模拟一下压入弹出即可。
实现代码 public boolean IsPopOrder(int [] pushA,int [] popA) { if(pushA.length == 0 || popA.length == 0 || pushA.length != popA.length)return false; Stack&amp;lt;Integer&amp;gt; test = new Stack&amp;lt;&amp;gt;(); int index = 0;//用来定位弹出序列 //按照压入序列依次压入栈中 for(int pushNum: pushA){ test.push(pushNum); //如果栈顶元素和弹出序列指针一致，则弹出，继续判断栈顶元素和弹出序列 while(index &amp;lt; popA.length &amp;amp;&amp;amp; test.peek() == popA[index]){ test.pop(); index++; } } //如果栈不空，则说明栈中还有元素，且和弹出序列的顺序不一致 return test.isEmpty(); }   最开始写的时候，在判断栈顶元素和弹出序列处的判断循环条件是这么写的：
while(test.peek() == popA[index])  然后运行的时候就会提示NullStackException，可以在条件中加入index &amp;lt; popA.length或者直接判断栈空否!test.isEmpty。
  </description>
    </item>
    
    <item>
      <title>数组中出现次数超过一半的数字</title>
      <link>https://chockee.github.io/post/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chockee.github.io/post/%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</guid>
      <description>题目描述 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。
解题思路 第一个想法是先对数组做排序，然后依次统计每个数字出现的次数，如果遇到了出现次数超过一半的数字就返回这个数，如果遍历完数组还没有这个数，就返回0； 因为Arrays.sort()使用了快速排序，所以时间复杂度是O(nlogn)，空间复杂度是O(1)
实现代码 import java.util.Arrays; public int MoreThanHalfNum_Solution(int [] array) { //先考虑边界情况 if(array.length == 1)return array[0]; Arrays.sort(array); int times = 1; for(int i = 1; i &amp;lt; array.length; i++){ if(array[i] == array[i - 1]){ times++; if(times &amp;gt; array.length/2)return array[i]; }else times = 1; } return 0; }  更好的方法 如果一个数字，它的出现次数超过一半，那么就意味着：其他数字跟它依次两两抵消，直到其他数字都被抵消完后，这个出现次数超过一半的数，还会有剩余的“幸存者”。
我们尝试生成两个变量，初始值为1的count用于计数和ansNum来记录“幸存”的数字，遍历数组，如果和前一个数字相等，则相互抵消，count--，相等则count++。如果count为0，则令ansNum等于当前的数字，并令count为1，重新开始计数。如果最后count大于1，则这个幸存的ansNum就是答案。 上述思路有个漏洞就是，假如前面的数字两两抵消，到最后一个数字突然出现，此时count重新计数，且ansNum等于它，就被最后这个数给“偷鸡”了，所以我们最后还要遍历一边数组，确认这个数的出现次数大于一半。
实现代码 public int MoreThanHalfNum_Solution(int [] array) { if(array.length == 1)return array[0]; int count = 1, ansNum = array[0]; for(int i = 1; i &amp;lt; array.</description>
    </item>
    
    <item>
      <title>Arrays.sort()的时间复杂度分析</title>
      <link>https://chockee.github.io/post/arrays.sort%E7%9A%84%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chockee.github.io/post/arrays.sort%E7%9A%84%E6%97%B6%E9%97%B4%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90/</guid>
      <description> Arrays.sort()是用什么算法？  如果传入参数类型是基本类型数组，则是快速排序； 如果传入参数类型是对象数组，则是归并排序； 二者的时间复杂度都是O(nlogn) ，空间复杂度分别是O(1)和O(n)。  为什么？  使用不同类型的排序算法主要是由于快速排序是不稳定的，而合并排序是稳定的。这里的稳定是指比较相等的数据在排序之后仍然按照排序之前的前后顺序排列。对于基本数据类型，稳定性没有意义，而对于对象类型，稳定性是比较重要的，因为对象相等的判断可能只是判断关键属性，最好保持相等对象的非关键属性的顺序与排序前一致； 另外一个原因是由于合并排序相对而言比较次数比快速排序少，移动（对象引用的移动）次数比快速排序多，而对于对象来说，比较一般比移动耗时。  </description>
    </item>
    
    <item>
      <title>Fibonacci的快速算法</title>
      <link>https://chockee.github.io/post/fibonacci%E7%94%A8%E9%80%92%E5%BD%92%E5%A4%AA%E6%85%A2%E6%80%8E%E4%B9%88%E5%8A%9E/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chockee.github.io/post/fibonacci%E7%94%A8%E9%80%92%E5%BD%92%E5%A4%AA%E6%85%A2%E6%80%8E%E4%B9%88%E5%8A%9E/</guid>
      <description> Fibonacci数列是大多数人接触递归时学的第一个用法，一般是这么写的：
public int Fib(int n){ if(n == 0||n == 1)return n; if(n == 2)return 1; return Fib(n-1) + Fib(n -2); }  简单粗暴好理解
 但是上述的方法存在的一个问题就是：存在了过多的重复计算。
 比如计算Fib(8)，我们要计算Fib(7)和Fib(6)，但是在计算Fib(7)的时候，我们又要重复计算一次Fib(6)，这样会大大降低程序的执行速度。
 于是有如下改进：
public int Fibonacci(int n) { if(n == 0)return 0; if(n == 1)return 1; int prepre = 0, pre = 1, ans = prepre +pre; while(n &amp;gt;= 2){ ans = prepre + pre; prepre = pre; pre = ans; n--; } return ans; }   </description>
    </item>
    
    <item>
      <title>Java中的数组切片方法</title>
      <link>https://chockee.github.io/post/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chockee.github.io/post/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</guid>
      <description> 题目描述 HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)
解题思路 动态规划，用dp数组保存当前位置的最大子序列和，然后返回dp数组中的最大值即可。
时间复杂度O(n)，空间复杂度O(1)
实现代码 public int FindGreatestSumOfSubArray(int[] array) { int max = array[0]; //直接在原数组上操作，将原数组作为dp数组 for (int i = 1; i &amp;lt; array.length; i++) { //如果dp[i-1]是负数，那么与dp[i]相加会使dp[i]变小 array[i] += array[i - 1] &amp;gt; 0 ? array[i - 1] : 0; //遍历的同时记录dp数组中的最大值 max = Math.max(max, array[i]); } return max; }  </description>
    </item>
    
    <item>
      <title>算法技巧：消去最后一位1</title>
      <link>https://chockee.github.io/post/%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7%E6%B6%88%E5%8E%BB%E6%9C%80%E5%90%8E%E4%B8%80%E4%BD%8D1/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chockee.github.io/post/%E7%AE%97%E6%B3%95%E6%8A%80%E5%B7%A7%E6%B6%88%E5%8E%BB%E6%9C%80%E5%90%8E%E4%B8%80%E4%BD%8D1/</guid>
      <description>算法原理  利用n&amp;amp;(n-1)可以消去二进制数中的最后一位1，比如：
 n = 10010, n-1 = 10001; n &amp;amp; (n-1) = 10010 &amp;amp; 10001 = 10000; 利用这个技巧，我们可以解决很多位运算相关的问题
举个例子 [1] 判断一个正整数 n 是否为 2 的幂次方
 如果一个数是 2 的幂次方，意味着 n 的二进制表示中，只有一个位 是1，其他都是0。
 所以呢，我们只需要判断N中的二进制表示法中是否只存在一个 1 就可以了。实现代码如下:
boolean judege(int n){ return n &amp;amp; (n - 1) == 0; }  [2] 将整数 n 转换为 m,需要改变多少二进制位？
 我们只需要计算 n 和 m 这两个数有多少个二进制位不一样就可以了，那么我们可以先让 n 和 m 进行异或，然后在计算异或得到的结果有多少个 1 就可以了。 ```java public int numsOfChange(int n, int m){ int t = n^m; int numOf1; while(t !</description>
    </item>
    
    <item>
      <title>青蛙跳台阶问题</title>
      <link>https://chockee.github.io/post/%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chockee.github.io/post/%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/</guid>
      <description> 题目 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。
解题思路 一只青蛙跳上n级台阶可以看成是从n-1级跳了1级台阶上来，也可以从n-1级跳2级台阶上来，所以n级台阶有F(n-1) + F(n-2)种跳法，于是就转化成了斐波拉切数列的问题。
实现代码： public int JumpFloor(int target) { if(target == 1)return 1; if(target == 2)return 2; while() }  题目进阶 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
解题思路 根据第一题的思路不难想到，跳上n级台阶可以从n-1级跳1级，n-2级跳2级，n-3级跳3级&amp;hellip;从0级跳n级。所以F(n) = F(n-1) + F(n-2) + &amp;hellip; + F(0)，又因为F(0) + F(1) + F(2) + &amp;hellip; + F(n-2) = F(n-1),所以F(n) = 2F(n-1)。(F(0)设为1)
实现代码 public int JumpFloorII(int target) { if(target &amp;lt;= 1)return target; int ans = 1, pre = 1; while(target &amp;gt; 1){ ans = 2*pre; pre = ans; target--; } return ans; }  </description>
    </item>
    
    <item>
      <title>Java中的数组切片方法</title>
      <link>https://chockee.github.io/post/java%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chockee.github.io/post/java%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87%E6%96%B9%E6%B3%95/</guid>
      <description> 调用Java.util.Arrays中的copyOfRange()方法可以实现对数组的切片。 具体参数为：
Type[] copyOfRange(Type[] array, int start, int end);  其中array为原来的数组，start为切片的起始位置，end为切片终止位置的前一位(取不到)：[start, end）
  </description>
    </item>
    
    <item>
      <title>厄拉多塞筛法：求质数的快速方法</title>
      <link>https://chockee.github.io/post/primenummethod/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chockee.github.io/post/primenummethod/</guid>
      <description> 算法原理  一种较快的求一定区间内质数个数的算法，原理如下：
[1]取一个集合，其中包含2至N的全部数字
[2]从2开始，在集合中划去2的倍数
[3]2的倍数划完以后，在集合中再划去3的倍数
[4]3的倍数划完以后，4因为是2的倍数，在第[2]步中已经划去，则跳过4；
[5]划去5的倍数&amp;hellip;一直到将根号N的倍数划去。 [6]剩下的没有划去的数，就是不大于N的数中的质数。
实现思路 根据上述，我们可以整理出算法思路：
定义一个大小为[N+1]的boolean型数组nums，将他们的初始值都置为true；
遍历2到根号N的数字i，如果nums[i]为false则跳过i，若nums[i]为true，则将不大于N的i的倍数nums[i * j]中的值都置为false；
定义一个ans用于记数，初始值为0；
从2开始遍历数组nums，如果nums中的值为ture，则ans+1，最后输出ans。
 代码实现:
public int countPrimes(int n){ boolean[] nums = new boolean[n]; for(int i = 2; i &amp;lt; nums.length; i++)nums[i] = true; for(int i = 2; i*i &amp;lt; n; i++){ if(nums[i]){ for(int j = 2; i*j &amp;lt; n; j++)nums[i*j] = false; } } int ans = 0; for(boolean x: nums)ans += x?1:0; return ans; }   </description>
    </item>
    
    <item>
      <title>如何用Hugo&#43;GitPage搭建静态博客</title>
      <link>https://chockee.github.io/post/firstblog/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chockee.github.io/post/firstblog/</guid>
      <description>作为大三党一名，再三考虑后选择放弃考研，加入明年的秋招大军。
 准备用博客记录下这一年中的学习经历，顺便培养自己的总结、表达能力。 于是上网搜寻了个人博客的搭建方法，主要的方法是用Hexo或者Hugo在本地搭建静态页面，然后再部署到服务器上。而Hugo较于Hexo更加灵活，快速，于是选择了Hugo。 在搭建的过程中也遇到了不少坑，主要是自己对hugo和git命令不熟悉的原因，百度也很少方案，最后靠自己慢慢摸索解决后，才发现百度上找不到的原因是这些问题实在太简单解决了&amp;hellip;  下载Hugo  我用的是Windows系统，在Github上的Hugo中，找到跟自己系统相对应的Hugo版本下载即可，我的系统是Windows64位，所以下载windows-64bits的版本。
 下载以后解压即可。注意，直接打开Hugo.exe是没用的！！要在系统的环境变量的PATH中添加Hugo.exe所在文件夹的路径。 比如Hugo.exe的路径是D:/Hugo/Hugo.exe，那么我们只需要填写D:/Hugo/就可以了 然后打开cmd，输入hugo version查看是否安装成功即可。
  新建自己的博客目录及设置主题  在命令行界面中，进入到你想保存博客的目录。输入
hugo new site [foldername]
创建博客根目录文件夹 可以在https://themes.gohugo.io选择自己喜欢的主题，点击进入介绍页面，下拉可以看到类似于
cd themes git clone &amp;lt;~~~~&amp;gt;  的段落，我们打开cmd，跟着操作即可。（Tips:如果博客页面根目录下没有themes文件夹，请自行创建）
 在命令行中输入
hugo server -t [theme_name] --buildDrafts
可以在本地搭建博客页面，然后在浏览器的地址栏中输入http://localhost:1313/，可以预览页面，Ctrl+C可以退出预览
  利用GitPage部署博客  首先要有一个github账号
(Windows系统还需要安装Git工具)。 登陆github，新建一个Repository 注意Repository name的填写内容，一定要填写自己的[用户名]+github.io，然后创建。 打开cmd，cd进入到博客根目录下，输入
hugo --theme=[theme_name] --baseUrl=&amp;quot;https://[username].github.io&amp;quot; --buildDrafts
可以看到一个public文件夹就被创建了。 在命令行界面中，依次输入：
cd public git init #初始化一个新的本地仓库 git add . #将当前文件夹的所有文件都添加到暂存区 git commit -m &amp;quot;first commit&amp;quot; #将暂存区的文件提交到数据目录 git remote add origin https://github.</description>
    </item>
    
  </channel>
</rss>